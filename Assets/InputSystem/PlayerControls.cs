//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Main Protag"",
            ""id"": ""e57fd274-1932-43b1-ac17-7c0fca38a843"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c7dbd55a-5e1e-4288-93fe-afa42fca474d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""38a3e141-4877-4f9c-9d5e-38b49d046709"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""b425e522-3cb6-4901-8f95-4284ee183fbc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grapple"",
                    ""type"": ""Button"",
                    ""id"": ""02f77a5b-0a38-4a68-9ebd-f09e97ee4541"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateWallSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""07270a3e-6447-4820-9b69-9fd6ac0b0095"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a56b52d2-2f2c-42c0-9fc1-5f31669d9657"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateWallSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""GamePad"",
                    ""id"": ""a2dd6a0b-baf4-4a30-80ee-d240871c59a9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""94600b79-216c-4b6b-9d8b-4f594ef450e5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1d650d45-485d-4e4c-ac5a-9c91bba05745"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""391739a0-b25e-40ec-ac92-30b476c01dbd"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f2134369-98b5-4527-b675-80b5a137382a"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""732594a2-de45-4cd2-9a37-aa341788a20e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""41d3b9c5-1bac-40c7-bd30-c3d084e9fec5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""48cb9e03-3130-4c62-975c-e48ac3e52233"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""95f7b0ba-7c1f-410c-9ecd-222482bae7d7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9c2e5b02-0d60-40c4-820d-3a9eab8a847c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ee980e18-e17d-4e2d-b853-edc8cb71eafa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0afe487-f5d0-424c-8bfc-c730fe151980"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""415751aa-70f0-4356-8d79-0f54b1133133"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main Protag
        m_MainProtag = asset.FindActionMap("Main Protag", throwIfNotFound: true);
        m_MainProtag_Movement = m_MainProtag.FindAction("Movement", throwIfNotFound: true);
        m_MainProtag_Jump = m_MainProtag.FindAction("Jump", throwIfNotFound: true);
        m_MainProtag_Attack = m_MainProtag.FindAction("Attack", throwIfNotFound: true);
        m_MainProtag_Grapple = m_MainProtag.FindAction("Grapple", throwIfNotFound: true);
        m_MainProtag_ActivateWallSwitch = m_MainProtag.FindAction("ActivateWallSwitch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main Protag
    private readonly InputActionMap m_MainProtag;
    private IMainProtagActions m_MainProtagActionsCallbackInterface;
    private readonly InputAction m_MainProtag_Movement;
    private readonly InputAction m_MainProtag_Jump;
    private readonly InputAction m_MainProtag_Attack;
    private readonly InputAction m_MainProtag_Grapple;
    private readonly InputAction m_MainProtag_ActivateWallSwitch;
    public struct MainProtagActions
    {
        private @PlayerControls m_Wrapper;
        public MainProtagActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MainProtag_Movement;
        public InputAction @Jump => m_Wrapper.m_MainProtag_Jump;
        public InputAction @Attack => m_Wrapper.m_MainProtag_Attack;
        public InputAction @Grapple => m_Wrapper.m_MainProtag_Grapple;
        public InputAction @ActivateWallSwitch => m_Wrapper.m_MainProtag_ActivateWallSwitch;
        public InputActionMap Get() { return m_Wrapper.m_MainProtag; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainProtagActions set) { return set.Get(); }
        public void SetCallbacks(IMainProtagActions instance)
        {
            if (m_Wrapper.m_MainProtagActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnJump;
                @Attack.started -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnAttack;
                @Grapple.started -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnGrapple;
                @Grapple.performed -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnGrapple;
                @Grapple.canceled -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnGrapple;
                @ActivateWallSwitch.started -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnActivateWallSwitch;
                @ActivateWallSwitch.performed -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnActivateWallSwitch;
                @ActivateWallSwitch.canceled -= m_Wrapper.m_MainProtagActionsCallbackInterface.OnActivateWallSwitch;
            }
            m_Wrapper.m_MainProtagActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Grapple.started += instance.OnGrapple;
                @Grapple.performed += instance.OnGrapple;
                @Grapple.canceled += instance.OnGrapple;
                @ActivateWallSwitch.started += instance.OnActivateWallSwitch;
                @ActivateWallSwitch.performed += instance.OnActivateWallSwitch;
                @ActivateWallSwitch.canceled += instance.OnActivateWallSwitch;
            }
        }
    }
    public MainProtagActions @MainProtag => new MainProtagActions(this);
    public interface IMainProtagActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnGrapple(InputAction.CallbackContext context);
        void OnActivateWallSwitch(InputAction.CallbackContext context);
    }
}
